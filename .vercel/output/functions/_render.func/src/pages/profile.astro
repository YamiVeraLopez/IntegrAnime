---
import PageLayout from "@layouts/PageLayout.astro";

// Datos iniciales
const initialData = {
	user: {
		name: "John Doe",
		avatar: "https://i.pinimg.com/736x/71/f9/3c/71f93c372475d6f17db9833eadf7233a.jpg",
		banner: "https://i.pinimg.com/736x/ad/00/21/ad0021d12cd6ac7ba9a33f97e322593c.jpg",
		favoriteGenre: "Cargando...",
	},
	stats: {
		total: 0,
		watched: 0,
		pending: 0,
	},
	myList: [],
};

---

<PageLayout title="Perfil" description="Página de perfil del usuario">
	<article class="profile">
		<!-- Encabezado del perfil -->
		<section class="profile__header">
			<div class="profile__header__banner">
				<picture class="profile__header__banner__image">
					<img
						src={initialData.user.banner}
						alt="Banner de portada"
						id="user-banner"
					/>
				</picture>
			</div>
			<div class="profile__header__info">
				<picture class="profile__header__info__avatar">
					<img
						src={initialData.user.avatar}
						alt="Avatar del usuario"
						id="user-avatar"
					/>
				</picture>
				<p class="profile__header__info__name" id="username">
					{initialData.user.name}
				</p>
			</div>
		</section>

		<!-- Barra lateral de estadísticas -->
		<aside class="profile__sidebar">
			<div class="profile__sidebar__item">
				<p>Género Favorito</p>
				<p id="favorite-genre">{initialData.user.favoriteGenre}</p>
			</div>
			<div class="profile__sidebar__item">
				<p>Total Lista</p>
				<p id="total-count">{initialData.stats.total}</p>
			</div>
			<div class="profile__sidebar__item">
				<p>Total vistos</p>
				<p id="watched-count">{initialData.stats.watched}</p>
			</div>
			<div class="profile__sidebar__item">
				<p>Pendientes</p>
				<p id="pending-count">{initialData.stats.pending}</p>
			</div>
		</aside>

		<!-- Lista de series/animes -->
		<section class="profile__list">
			<h1 class="profile__list__title">Mi lista de series</h1>
			<div id="list-container">
				<p>Cargando lista...</p>
			</div>
		</section>
	</article>

	<script is:inline>
		document.addEventListener("DOMContentLoaded", () => {
			// Keys de LocalStorage
			const USER_KEY = "animeAppCurrentUser";
			const LIST_KEY = "myList";
			// 1. Cargar datos del localStorage
			const loadData = () => {
				const storedList =
					JSON.parse(localStorage.getItem(LIST_KEY)) || [];
				const userData =
					JSON.parse(localStorage.getItem(USER_KEY)) ||
					initialData.user;
				// Mapear datos a la estructura esperada
				const myList = storedList.map((item) => ({
					id: item.id,
					name: item.title || "Sin título",
					image: item.image,
					progress: item.progress || 0,
					platform: item.platform || "Desconocida",
					genre: item.genres || [],
				}));

				document.getElementById("user-avatar").src =
					userData.avatarUrl || userData.avatar;
				document.getElementById("user-banner").src =
					userData.bannerUrl || userData.banner;
				document.getElementById("username").textContent =
					userData.username || userData.name;
				document.getElementById("favorite-genre").textContent =
					userData.favoriteGenre || "No especificado";

				// 2. Actualizar estadísticas
				const updateStats = () => {
					document.getElementById("total-count").textContent =
						myList.length;
					document.getElementById("watched-count").textContent =
						myList.filter((item) => item.progress === 100).length;
					document.getElementById("pending-count").textContent =
						myList.filter((item) => item.progress < 100).length;
				};

				// 3. Calcular género favorito
				const updateFavoriteGenre = () => {
					if (myList.length === 0) {
						document.getElementById("favorite-genre").textContent =
							"No especificado";
						return;
					}

					const genreCounts = {};
					myList.forEach((item) => {
						item.genre.forEach((g) => {
							genreCounts[g] = (genreCounts[g] || 0) + 1;
						});
					});

					const sortedGenres = Object.entries(genreCounts).sort(
						(a, b) => b[1] - a[1]
					);
					document.getElementById("favorite-genre").textContent =
						sortedGenres.length > 0
							? sortedGenres[0][0]
							: "No especificado";
				};

				// 4. Renderizar la lista
				const renderList = () => {
					const listContainer =
						document.getElementById("list-container");

					if (myList.length === 0) {
						listContainer.innerHTML = `
              <div class="empty-state">
                <p>No tienes animes en tu lista aún</p>
              </div>
            `;
						return;
					}

					listContainer.innerHTML = myList
						.map(
							(item) => `
            <div class="list__item" draggable="true" data-id="${item.id}">
              <picture class="list__item__poster">
                <img src="${item.image}" alt="${item.name}" />
              </picture>
              <div class="list__item__info">
                <p class="list__item__name">
                  <a href="#">${item.name}</a>
                </p>
                <p class="list__item__progress" id="progress-${item.id}">
                  Porcentaje visto: ${item.progress}%
                </p>
                ${
					item.platform
						? `
                <p class="list__item__platform">
                  Plataforma: ${item.platform}
                </p>
                `
						: ""
				}
                ${
					item.genre.length > 0
						? `
                <p class="list__item__genre">
                  Géneros: ${item.genre.join(", ")}
                </p>
                `
						: ""
				}
              </div>
              <div class="list__item__check">
                <input
                  type="checkbox"
                  id="view-${item.id}"
                  ${item.progress === 100 ? "checked" : ""}
                  data-id="${item.id}"
                />
              </div>
            </div>
          `
						)
						.join("");
				};

				// Ejecutar todas las actualizaciones
				updateStats();
				updateFavoriteGenre();
				renderList();

				// Configurar eventos de los checkboxes
				document
					.querySelectorAll(".list__item__check input")
					.forEach((checkbox) => {
						checkbox.addEventListener("change", (e) => {
							const id = e.target.dataset.id;
							const checked = e.target.checked;
							const progress = checked ? 100 : 0;

							// Actualizar localStorage
							const updatedList = storedList.map((item) => {
								if (item.id.toString() === id) {
									return { ...item, progress };
								}
								return item;
							});
							localStorage.setItem(
								"myList",
								JSON.stringify(updatedList)
							);

							// Actualizar UI
							document.getElementById(
								`progress-${id}`
							).textContent = `Porcentaje visto: ${progress}%`;

							// Volver a calcular estadísticas
							loadData();
						});
					});
			};

			// Cargar datos iniciales
			loadData();

			// Escuchar cambios en otras pestañas
			window.addEventListener("storage", (e) => {
				if (e.key === "myList") {
					loadData();
				}
			});
		});
	</script>
</PageLayout>
<style>
	.profile {
		display: grid;
		grid-template-areas:
			"header"
			"sidebar"
			"list";
		grid-template-columns: 1fr;
		grid-template-rows: auto auto 1fr;
		padding: 0 3rem;

		.profile__header {
			grid-area: header;
			margin-top: -0.8rem;
			.profile__header__banner {
				height: 20dvh;
				border: 1px solid var(--indigo);
				border-radius: 1rem;
				.profile__header__banner__image {
					width: 100%;
					height: 100%;
					object-fit: cover;
					img {
						width: 100%;
						height: 100%;
						object-fit: cover;
						border-radius: 1rem;
					}
				}
			}
			.profile__header__info {
				display: flex;
				flex-direction: column;
				align-items: center;
				justify-content: center;
				gap: 1rem;
				margin-top: -5rem;
				width: 100%;

				.profile__header__info__avatar {
					width: 150px;
					height: 150px;
					border-radius: 50%;
					border: 1px solid var(--indigo);
					overflow: hidden;
					img {
						width: 100%;
						height: 100%;
						object-fit: cover;
					}
				}
				.profile__header__info__name {
					font-weight: 700;
					text-transform: uppercase;
					font-size: 1.2rem;
					color: var(--indigo);
					text-align: center;
				}
			}
		}
		.profile__sidebar {
			grid-area: sidebar;
			width: 100%;
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
			gap: 0.5rem;
			padding: 2rem 0.5rem;
			.profile__sidebar__item {
				min-width: 150px;
				text-align: center;
				display: flex;
				flex-direction: column;
				justify-content: center;
				align-items: center;
				border: 2px solid var(--indigo);
				color: var(--indigo);
				padding: 1rem;
				border-radius: 1rem;
				font-weight: 700;
				font-size: 1rem;
				user-select: none;
				transition: all 0.3s ease;
			}
			.profile__sidebar__item:hover {
				color: var(--white);
				background-color: var(--indigo);
			}
		}
		.profile__list {
			grid-area: list;
			.list__item {
				display: grid;
				grid-template-columns: 1fr 2fr 1fr;
				place-items: center;
				border: 1px solid var(--indigo);
				padding: 1rem;
				border-radius: 1rem;
				margin-bottom: 0.5rem;
				font-weight: 500;
				font-size: 0.6rem;
				color: var(--gray);
				text-align: start;
				width: 100%;
			}
			.list__item.dragging {
				opacity: 0.5;
				background-color: var(--gray-light);
			}
			.list__item__poster {
				width: 80px;
				height: 80px;
				border-radius: 8px;
				overflow: hidden;
				border: 1px solid var(--indigo);
			}
			.list__item__poster img {
				width: 100%;
				height: 100%;
				object-fit: cover;
			}
			.list__item__info {
				width: 100%;
				display: flex;
				flex-direction: column;
				margin-left: 15px;
				gap: 0.5rem;
			}
			.list__item__name {
				font-weight: 600;
				font-size: 0.9rem;
				color: var(--indigo);
				text-align: center;
			}
			.list__item__check {
				width: 100%;
				display: flex;
				align-items: center;
				justify-content: end;
			}
			.list__item__check input[type="checkbox"] {
				width: 20px;
				height: 20px;
				cursor: pointer;
				accent-color: var(--indigo);
			}
		}
	}

	@media screen and (min-width: 768px) and (max-width: 1024px) {
		.profile {
			grid-template-areas:
				"header header header"
				"sidebar list list";
			grid-template-columns: 1fr 2fr;
		}
	}

	@media screen and (min-width: 1024px) {
		.profile {
			grid-template-areas:
				"header header header"
				"sidebar list list";
			grid-template-columns: 30% 70%;
			grid-template-rows: auto 1fr;

			.profile__header {
				.profile__header__info {
					flex-direction: row;
					justify-content: flex-start;
					padding-left: 50px;
					gap: 1rem;
					margin-top: -5rem;
					width: 100%;
					.profile__header__info__name {
						font-size: 1.5rem;
						width: fit-content;
						padding: 0.5rem 1rem;
						border-radius: 0.5rem;
						background-color: color-mix(
							in oklch,
							var(--creamy-ivory) 80%,
							transparent
						);
						box-shadow: 0 0 10px
							color-mix(
								in oklch,
								var(--creamy-ivory) 50%,
								transparent
							);
					}
				}
			}
			.profile__sidebar {
				position: sticky;
				top: 1rem;
				align-self: start;
				display: flex;
				flex-direction: column;
			}
		}
	}
</style>
