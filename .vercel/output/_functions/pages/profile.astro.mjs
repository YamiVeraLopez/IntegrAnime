import { c as createComponent, d as renderComponent, r as renderTemplate, b as addAttribute, m as maybeRenderHead } from '../chunks/astro/server_BCkfWrbs.mjs';
import { $ as $$PageLayout } from '../chunks/PageLayout_wfkKv-Uw.mjs';
/* empty css                                   */
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Profile = createComponent(($$result, $$props, $$slots) => {
  const initialData = {
    user: {
      name: "John Doe",
      avatar: "https://i.pinimg.com/736x/71/f9/3c/71f93c372475d6f17db9833eadf7233a.jpg",
      banner: "https://i.pinimg.com/736x/ad/00/21/ad0021d12cd6ac7ba9a33f97e322593c.jpg",
      favoriteGenre: "Cargando..."
    },
    stats: {
      total: 0,
      watched: 0,
      pending: 0
    }};
  return renderTemplate`${renderComponent($$result, "PageLayout", $$PageLayout, { "title": "Perfil", "description": "P\xE1gina de perfil del usuario", "data-astro-cid-wwes6yjo": true }, { "default": ($$result2) => renderTemplate(_a || (_a = __template([" ", '<article class="profile" data-astro-cid-wwes6yjo> <!-- Encabezado del perfil --> <section class="profile__header" data-astro-cid-wwes6yjo> <div class="profile__header__banner" data-astro-cid-wwes6yjo> <picture class="profile__header__banner__image" data-astro-cid-wwes6yjo> <img', ' alt="Banner de portada" id="user-banner" data-astro-cid-wwes6yjo> </picture> </div> <div class="profile__header__info" data-astro-cid-wwes6yjo> <picture class="profile__header__info__avatar" data-astro-cid-wwes6yjo> <img', ' alt="Avatar del usuario" id="user-avatar" data-astro-cid-wwes6yjo> </picture> <p class="profile__header__info__name" id="username" data-astro-cid-wwes6yjo> ', ' </p> </div> </section> <!-- Barra lateral de estad\xEDsticas --> <aside class="profile__sidebar" data-astro-cid-wwes6yjo> <div class="profile__sidebar__item" data-astro-cid-wwes6yjo> <p data-astro-cid-wwes6yjo>G\xE9nero Favorito</p> <p id="favorite-genre" data-astro-cid-wwes6yjo>', '</p> </div> <div class="profile__sidebar__item" data-astro-cid-wwes6yjo> <p data-astro-cid-wwes6yjo>Total Lista</p> <p id="total-count" data-astro-cid-wwes6yjo>', '</p> </div> <div class="profile__sidebar__item" data-astro-cid-wwes6yjo> <p data-astro-cid-wwes6yjo>Total vistos</p> <p id="watched-count" data-astro-cid-wwes6yjo>', '</p> </div> <div class="profile__sidebar__item" data-astro-cid-wwes6yjo> <p data-astro-cid-wwes6yjo>Pendientes</p> <p id="pending-count" data-astro-cid-wwes6yjo>', '</p> </div> </aside> <!-- Lista de series/animes --> <section class="profile__list" data-astro-cid-wwes6yjo> <h1 class="profile__list__title" data-astro-cid-wwes6yjo>Mi lista de series</h1> <div id="list-container" data-astro-cid-wwes6yjo> <p data-astro-cid-wwes6yjo>Cargando lista...</p> </div> </section> </article> <script>\n		document.addEventListener("DOMContentLoaded", () => {\n			// Keys de LocalStorage\n			const USER_KEY = "animeAppCurrentUser";\n			const LIST_KEY = "myList";\n			// 1. Cargar datos del localStorage\n			const loadData = () => {\n				const storedList =\n					JSON.parse(localStorage.getItem(LIST_KEY)) || [];\n				const userData =\n					JSON.parse(localStorage.getItem(USER_KEY)) ||\n					initialData.user;\n				// Mapear datos a la estructura esperada\n				const myList = storedList.map((item) => ({\n					id: item.id,\n					name: item.title || "Sin t\xEDtulo",\n					image: item.image,\n					progress: item.progress || 0,\n					platform: item.platform || "Desconocida",\n					genre: item.genres || [],\n				}));\n\n				document.getElementById("user-avatar").src =\n					userData.avatarUrl || userData.avatar;\n				document.getElementById("user-banner").src =\n					userData.bannerUrl || userData.banner;\n				document.getElementById("username").textContent =\n					userData.username || userData.name;\n				document.getElementById("favorite-genre").textContent =\n					userData.favoriteGenre || "No especificado";\n\n				// 2. Actualizar estad\xEDsticas\n				const updateStats = () => {\n					document.getElementById("total-count").textContent =\n						myList.length;\n					document.getElementById("watched-count").textContent =\n						myList.filter((item) => item.progress === 100).length;\n					document.getElementById("pending-count").textContent =\n						myList.filter((item) => item.progress < 100).length;\n				};\n\n				// 3. Calcular g\xE9nero favorito\n				const updateFavoriteGenre = () => {\n					if (myList.length === 0) {\n						document.getElementById("favorite-genre").textContent =\n							"No especificado";\n						return;\n					}\n\n					const genreCounts = {};\n					myList.forEach((item) => {\n						item.genre.forEach((g) => {\n							genreCounts[g] = (genreCounts[g] || 0) + 1;\n						});\n					});\n\n					const sortedGenres = Object.entries(genreCounts).sort(\n						(a, b) => b[1] - a[1]\n					);\n					document.getElementById("favorite-genre").textContent =\n						sortedGenres.length > 0\n							? sortedGenres[0][0]\n							: "No especificado";\n				};\n\n				// 4. Renderizar la lista\n				const renderList = () => {\n					const listContainer =\n						document.getElementById("list-container");\n\n					if (myList.length === 0) {\n						listContainer.innerHTML = `\n              <div class="empty-state">\n                <p>No tienes animes en tu lista a\xFAn</p>\n              </div>\n            `;\n						return;\n					}\n\n					listContainer.innerHTML = myList\n						.map(\n							(item) => `\n            <div class="list__item" draggable="true" data-id="${item.id}">\n              <picture class="list__item__poster">\n                <img src="${item.image}" alt="${item.name}" />\n              </picture>\n              <div class="list__item__info">\n                <p class="list__item__name">\n                  <a href="#">${item.name}</a>\n                </p>\n                <p class="list__item__progress" id="progress-${item.id}">\n                  Porcentaje visto: ${item.progress}%\n                </p>\n                ${\n					item.platform\n						? `\n                <p class="list__item__platform">\n                  Plataforma: ${item.platform}\n                </p>\n                `\n						: ""\n				}\n                ${\n					item.genre.length > 0\n						? `\n                <p class="list__item__genre">\n                  G\xE9neros: ${item.genre.join(", ")}\n                </p>\n                `\n						: ""\n				}\n              </div>\n              <div class="list__item__check">\n                <input\n                  type="checkbox"\n                  id="view-${item.id}"\n                  ${item.progress === 100 ? "checked" : ""}\n                  data-id="${item.id}"\n                />\n              </div>\n            </div>\n          `\n						)\n						.join("");\n				};\n\n				// Ejecutar todas las actualizaciones\n				updateStats();\n				updateFavoriteGenre();\n				renderList();\n\n				// Configurar eventos de los checkboxes\n				document\n					.querySelectorAll(".list__item__check input")\n					.forEach((checkbox) => {\n						checkbox.addEventListener("change", (e) => {\n							const id = e.target.dataset.id;\n							const checked = e.target.checked;\n							const progress = checked ? 100 : 0;\n\n							// Actualizar localStorage\n							const updatedList = storedList.map((item) => {\n								if (item.id.toString() === id) {\n									return { ...item, progress };\n								}\n								return item;\n							});\n							localStorage.setItem(\n								"myList",\n								JSON.stringify(updatedList)\n							);\n\n							// Actualizar UI\n							document.getElementById(\n								`progress-${id}`\n							).textContent = `Porcentaje visto: ${progress}%`;\n\n							// Volver a calcular estad\xEDsticas\n							loadData();\n						});\n					});\n			};\n\n			// Cargar datos iniciales\n			loadData();\n\n			// Escuchar cambios en otras pesta\xF1as\n			window.addEventListener("storage", (e) => {\n				if (e.key === "myList") {\n					loadData();\n				}\n			});\n		});\n	<\/script> '], [" ", '<article class="profile" data-astro-cid-wwes6yjo> <!-- Encabezado del perfil --> <section class="profile__header" data-astro-cid-wwes6yjo> <div class="profile__header__banner" data-astro-cid-wwes6yjo> <picture class="profile__header__banner__image" data-astro-cid-wwes6yjo> <img', ' alt="Banner de portada" id="user-banner" data-astro-cid-wwes6yjo> </picture> </div> <div class="profile__header__info" data-astro-cid-wwes6yjo> <picture class="profile__header__info__avatar" data-astro-cid-wwes6yjo> <img', ' alt="Avatar del usuario" id="user-avatar" data-astro-cid-wwes6yjo> </picture> <p class="profile__header__info__name" id="username" data-astro-cid-wwes6yjo> ', ' </p> </div> </section> <!-- Barra lateral de estad\xEDsticas --> <aside class="profile__sidebar" data-astro-cid-wwes6yjo> <div class="profile__sidebar__item" data-astro-cid-wwes6yjo> <p data-astro-cid-wwes6yjo>G\xE9nero Favorito</p> <p id="favorite-genre" data-astro-cid-wwes6yjo>', '</p> </div> <div class="profile__sidebar__item" data-astro-cid-wwes6yjo> <p data-astro-cid-wwes6yjo>Total Lista</p> <p id="total-count" data-astro-cid-wwes6yjo>', '</p> </div> <div class="profile__sidebar__item" data-astro-cid-wwes6yjo> <p data-astro-cid-wwes6yjo>Total vistos</p> <p id="watched-count" data-astro-cid-wwes6yjo>', '</p> </div> <div class="profile__sidebar__item" data-astro-cid-wwes6yjo> <p data-astro-cid-wwes6yjo>Pendientes</p> <p id="pending-count" data-astro-cid-wwes6yjo>', '</p> </div> </aside> <!-- Lista de series/animes --> <section class="profile__list" data-astro-cid-wwes6yjo> <h1 class="profile__list__title" data-astro-cid-wwes6yjo>Mi lista de series</h1> <div id="list-container" data-astro-cid-wwes6yjo> <p data-astro-cid-wwes6yjo>Cargando lista...</p> </div> </section> </article> <script>\n		document.addEventListener("DOMContentLoaded", () => {\n			// Keys de LocalStorage\n			const USER_KEY = "animeAppCurrentUser";\n			const LIST_KEY = "myList";\n			// 1. Cargar datos del localStorage\n			const loadData = () => {\n				const storedList =\n					JSON.parse(localStorage.getItem(LIST_KEY)) || [];\n				const userData =\n					JSON.parse(localStorage.getItem(USER_KEY)) ||\n					initialData.user;\n				// Mapear datos a la estructura esperada\n				const myList = storedList.map((item) => ({\n					id: item.id,\n					name: item.title || "Sin t\xEDtulo",\n					image: item.image,\n					progress: item.progress || 0,\n					platform: item.platform || "Desconocida",\n					genre: item.genres || [],\n				}));\n\n				document.getElementById("user-avatar").src =\n					userData.avatarUrl || userData.avatar;\n				document.getElementById("user-banner").src =\n					userData.bannerUrl || userData.banner;\n				document.getElementById("username").textContent =\n					userData.username || userData.name;\n				document.getElementById("favorite-genre").textContent =\n					userData.favoriteGenre || "No especificado";\n\n				// 2. Actualizar estad\xEDsticas\n				const updateStats = () => {\n					document.getElementById("total-count").textContent =\n						myList.length;\n					document.getElementById("watched-count").textContent =\n						myList.filter((item) => item.progress === 100).length;\n					document.getElementById("pending-count").textContent =\n						myList.filter((item) => item.progress < 100).length;\n				};\n\n				// 3. Calcular g\xE9nero favorito\n				const updateFavoriteGenre = () => {\n					if (myList.length === 0) {\n						document.getElementById("favorite-genre").textContent =\n							"No especificado";\n						return;\n					}\n\n					const genreCounts = {};\n					myList.forEach((item) => {\n						item.genre.forEach((g) => {\n							genreCounts[g] = (genreCounts[g] || 0) + 1;\n						});\n					});\n\n					const sortedGenres = Object.entries(genreCounts).sort(\n						(a, b) => b[1] - a[1]\n					);\n					document.getElementById("favorite-genre").textContent =\n						sortedGenres.length > 0\n							? sortedGenres[0][0]\n							: "No especificado";\n				};\n\n				// 4. Renderizar la lista\n				const renderList = () => {\n					const listContainer =\n						document.getElementById("list-container");\n\n					if (myList.length === 0) {\n						listContainer.innerHTML = \\`\n              <div class="empty-state">\n                <p>No tienes animes en tu lista a\xFAn</p>\n              </div>\n            \\`;\n						return;\n					}\n\n					listContainer.innerHTML = myList\n						.map(\n							(item) => \\`\n            <div class="list__item" draggable="true" data-id="\\${item.id}">\n              <picture class="list__item__poster">\n                <img src="\\${item.image}" alt="\\${item.name}" />\n              </picture>\n              <div class="list__item__info">\n                <p class="list__item__name">\n                  <a href="#">\\${item.name}</a>\n                </p>\n                <p class="list__item__progress" id="progress-\\${item.id}">\n                  Porcentaje visto: \\${item.progress}%\n                </p>\n                \\${\n					item.platform\n						? \\`\n                <p class="list__item__platform">\n                  Plataforma: \\${item.platform}\n                </p>\n                \\`\n						: ""\n				}\n                \\${\n					item.genre.length > 0\n						? \\`\n                <p class="list__item__genre">\n                  G\xE9neros: \\${item.genre.join(", ")}\n                </p>\n                \\`\n						: ""\n				}\n              </div>\n              <div class="list__item__check">\n                <input\n                  type="checkbox"\n                  id="view-\\${item.id}"\n                  \\${item.progress === 100 ? "checked" : ""}\n                  data-id="\\${item.id}"\n                />\n              </div>\n            </div>\n          \\`\n						)\n						.join("");\n				};\n\n				// Ejecutar todas las actualizaciones\n				updateStats();\n				updateFavoriteGenre();\n				renderList();\n\n				// Configurar eventos de los checkboxes\n				document\n					.querySelectorAll(".list__item__check input")\n					.forEach((checkbox) => {\n						checkbox.addEventListener("change", (e) => {\n							const id = e.target.dataset.id;\n							const checked = e.target.checked;\n							const progress = checked ? 100 : 0;\n\n							// Actualizar localStorage\n							const updatedList = storedList.map((item) => {\n								if (item.id.toString() === id) {\n									return { ...item, progress };\n								}\n								return item;\n							});\n							localStorage.setItem(\n								"myList",\n								JSON.stringify(updatedList)\n							);\n\n							// Actualizar UI\n							document.getElementById(\n								\\`progress-\\${id}\\`\n							).textContent = \\`Porcentaje visto: \\${progress}%\\`;\n\n							// Volver a calcular estad\xEDsticas\n							loadData();\n						});\n					});\n			};\n\n			// Cargar datos iniciales\n			loadData();\n\n			// Escuchar cambios en otras pesta\xF1as\n			window.addEventListener("storage", (e) => {\n				if (e.key === "myList") {\n					loadData();\n				}\n			});\n		});\n	<\/script> '])), maybeRenderHead(), addAttribute(initialData.user.banner, "src"), addAttribute(initialData.user.avatar, "src"), initialData.user.name, initialData.user.favoriteGenre, initialData.stats.total, initialData.stats.watched, initialData.stats.pending) })} `;
}, "C:/Users/EQUIPO/Desktop/ProyectoIntegrarTec/IntegrAnime/src/pages/profile.astro", void 0);

const $$file = "C:/Users/EQUIPO/Desktop/ProyectoIntegrarTec/IntegrAnime/src/pages/profile.astro";
const $$url = "/profile";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	default: $$Profile,
	file: $$file,
	url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
