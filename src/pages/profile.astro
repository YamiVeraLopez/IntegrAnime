---
import ListItem from "@components/ListItem.astro";
import PageLayout from "@layouts/PageLayout.astro";

const myList = [
    {
        id: 1,
        urlPoster: "https://i.pinimg.com/736x/71/f9/3c/71f93c372475d6f17db9833eadf7233a.jpg",
        name: "El viaje de Chihiro",
        progress: 60,
        platform: "Crunchyroll",
        draggable: true,
    },
    {
        id: 2,  
        urlPoster: "https://i.pinimg.com/736x/71/f9/3c/71f93c372475d6f17db9833eadf7233a.jpg",
        name: "One Piece",
        progress: 60,
        platform: "Crunchyroll",
        draggable: true,
    },
    {
        id: 3,
        urlPoster: "https://i.pinimg.com/736x/71/f9/3c/71f93c372475d6f17db9833eadf7233a.jpg",
        name: "Bleach",
        progress: 100,
        platform: "Crunchyroll",
        draggable: true,
    },
    {
        id: 4,
        urlPoster: "https://i.pinimg.com/736x/71/f9/3c/71f93c372475d6f17db9833eadf7233a.jpg",
        name: "Dr. Stone",
        progress: 90,
        platform: "Crunchyroll",
        draggable: true,
    },
];
---

<PageLayout title="Profile" description="User Profile Page">
	<article class="profile">
		<section class="profile__header">
			<div class="profile__header__banner">
				<picture class="profile__header__banner__image">
					<img
						src="https://i.pinimg.com/736x/ad/00/21/ad0021d12cd6ac7ba9a33f97e322593c.jpg"
						alt="Banner de portada"
					/>
				</picture>
			</div>
			<div class="profile__header__info">
				<picture class="profile__header__info__avatar">
					<img
						src="https://i.pinimg.com/736x/71/f9/3c/71f93c372475d6f17db9833eadf7233a.jpg"
						alt="User Avatar"
					/>
				</picture>
				<p class="profile__header__info__name">John Doe</p>
			</div>
		</section>

		<aside class="profile__sidebar">
			<div class="profile__sidebar__item">
				<p>Género Favorito</p><p>Acción</p>
			</div>
			<div class="profile__sidebar__item">
				<p>Total Lista</p><p>20</p>
			</div>
			<div class="profile__sidebar__item">
				<p>Total vistos</p><p>15</p>
			</div>
			<div class="profile__sidebar__item"><p>Pendientes</p><p>5</p></div>
		</aside>

		<section class="profile__list">
			<h1 class="profile__list__title">Mi lista de series</h1>
            {myList.map(item => (
                <ListItem
                    id={item.id}
                    urlPoster={item.urlPoster}
                    name={item.name}
                    progress={item.progress}
                    platform={item.platform}
                    draggable={item.draggable}
                />
            ))}			
		</section>
	</article>

	<style>
		.profile {
			display: grid;
			grid-template-areas:
				"header"
				"sidebar"
				"list";
			grid-template-columns: 1fr;
			grid-template-rows: auto auto 1fr;
			padding: 0 3rem;

			.profile__header {
				grid-area: header;
				margin-top: -0.8rem;
				.profile__header__banner {
					height: 20dvh;
					border: 1px solid var(--indigo);
					border-radius: 1rem;
					.profile__header__banner__image {
						width: 100%;
						height: 100%;
						object-fit: cover;
						img {
							width: 100%;
							height: 100%;
							object-fit: cover;
							border-radius: 1rem;
						}
					}
				}
				.profile__header__info {
					display: flex;
					flex-direction: column;
					align-items: center;
					justify-content: center;
					gap: 1rem;
					margin-top: -5rem;
					width: 100%;

					.profile__header__info__avatar {
						width: 150px;
						height: 150px;
						border-radius: 50%;
						border: 1px solid var(--indigo);
						overflow: hidden;
						img {
							width: 100%;
							height: 100%;
							object-fit: cover;
						}
					}
					.profile__header__info__name {
						font-weight: 700;
						text-transform: uppercase;
						font-size: 1.2rem;
						color: var(--indigo);
						text-align: center;
					}
				}
			}
			.profile__sidebar {
				grid-area: sidebar;
				width: 100%;
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
				gap: 0.5rem;
				padding: 2rem 0.5rem;
				.profile__sidebar__item {
					min-width: 150px;
					text-align: center;
					display: flex;
					flex-direction: column;
					justify-content: center;
					align-items: center;
					border: 2px solid var(--indigo);
					color: var(--indigo);
					padding: 1rem;
					border-radius: 1rem;
					font-weight: 700;
					font-size: 1rem;
					user-select: none;
					transition: all 0.3s ease;
				}
				.profile__sidebar__item:hover {
					color: var(--white);
					background-color: var(--indigo);
				}
			}
			.profile__list {
				grid-area: list;
			}
		}

		@media screen and (min-width: 768px) and (max-width: 1024px) {
			.profile {
				grid-template-areas:
					"header header header"
					"sidebar list list";
				grid-template-columns: 1fr 2fr;
			}
		}

		@media screen and (min-width: 1024px) {
			.profile {
				grid-template-areas:
					"header header header"
					"sidebar list list";
				grid-template-columns: 30% 70%;
				grid-template-rows: auto 1fr;

				.profile__header {
					.profile__header__info {
						flex-direction: row;
						justify-content: flex-start;
						padding-left: 50px;
						gap: 1rem;
						margin-top: -5rem;
						width: 100%;
						.profile__header__info__name {
                            font-size: 1.5rem;
							width: fit-content;
							padding: 0.5rem 1rem;
							border-radius: 0.5rem;
							background-color: color-mix(
								in oklch,
								var(--creamy-ivory) 80%,
								transparent
							);
							box-shadow: 0 0 10px
								color-mix(
									in oklch,
									var(--creamy-ivory) 50%,
									transparent
								);
						}
					}
				}
				.profile__sidebar {
					position: sticky;
					top: 1rem;
					align-self: start;
					display: flex;
					flex-direction: column;
				}
			}
		}
	</style>

	<script>
		const listContainer = document.querySelector(".profile__list");
		let draggedItem = null;

		document.querySelectorAll(".list__item").forEach((item) => {
			item.addEventListener("dragstart", () => {
				draggedItem = item;
				item.classList.add("dragging");
			});

			item.addEventListener("dragend", () => {
				draggedItem = null;
				item.classList.remove("dragging");
			});
		});

		listContainer.addEventListener("dragover", (e) => {
			e.preventDefault();
			const afterElement = getDragAfterElement(listContainer, e.clientY);
			if (afterElement == null) {
				listContainer.appendChild(draggedItem);
			} else {
				listContainer.insertBefore(draggedItem, afterElement);
			}
		});

		function getDragAfterElement(container, y) {
			const draggableElements = [
				...container.querySelectorAll(".list__item:not(.dragging)"),
			];

			return draggableElements.reduce(
				(closest, child) => {
					const box = child.getBoundingClientRect();
					const offset = y - box.top - box.height / 2;
					if (offset < 0 && offset > closest.offset) {
						return { offset: offset, element: child };
					} else {
						return closest;
					}
				},
				{ offset: Number.NEGATIVE_INFINITY }
			).element;
		}
	</script>
</PageLayout>
